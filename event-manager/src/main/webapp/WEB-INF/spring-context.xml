<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="configLocation">
			<value>classpath:hibernate.cfg.xml</value>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">false</prop>
			</props>
		</property>
		<property name="dataSource">
			<ref bean="data-source" />
		</property>
	</bean>


	<bean id="eventManagerDaoImpl" class="ma.eventmanager.dao.impl.EventManagerDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>


	<!-- Transaction manager -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>

	<bean id="txProxyTemplate" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" abstract="true">
		<property name="transactionManager">
			<ref local="transactionManager" />
		</property>
	</bean>
	
	<bean id="userDetailsServiceEM"  class="ma.eventmanager.service.UserDetailsServiceImpl">
		<property name="eventManagerDao" ref="eventManagerDaoImpl" />
	</bean>
	
	<bean id="authProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<property name="userDetailsService" ref="userDetailsServiceEM" />
		<property name="passwordEncoder" ref="encoder" />
  	</bean>

  <bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	
	
	<bean id="data-source" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName">
			<value>com.mysql.jdbc.Driver</value>
		</property>

		<!-- Dev   -->
		<property name="url">
			<value>jdbc:mysql://localhost:3306/eventmanager</value> 
		</property>
		<property name="username">
			<value>XXXXXXXXXXXXXXX</value>
		</property>
		<property name="password">
			<value>XXXXXXXXXXXXXXX</value>
		</property>
		
		
		<!-- Prod 
		<value>jdbc:mysql://localhost:3326/kpiano2</value>
		</property>
		<property name="username">
			<value>root</value>
		</property>
		<property name="password">
			<value></value>	
		</property>
		 -->
	</bean>
	
	<!-- Activate the annotations spring -->
	<context:annotation-config />

	<!-- Packages scan des beans -->
	<context:component-scan base-package="ma.eventmanager.dao.impl" />	
	
	
	<bean id="applicationInitialization" class="ma.eventmanager.service.ApplicationInitialization">
		<property name="eventManagerDao" ref="eventManagerDaoImpl" />
	</bean>
	
	
	
	<bean id="envVariabls" class="java.util.HashMap">
		<constructor-arg>
			<map>
				<!-- Lecture -->
				<entry key="payment.reader.exec" value="\\%s\Users\zakaria\dev\evenetmanager\dll_monetique\Lecture\lecture.bat" />
				<entry key="payment.reader.outFile" value="\\%s\Users\zakaria\dev\evenetmanager\dll_monetique\Lecture\Dataout.txt" />
				<!-- Debiter -->
				<entry key="payment.debit.exec" value="\\%s\Users\zakaria\dev\evenetmanager\dll_monetique\Debit\Debit.bat" />
				<entry key="payment.debit.inFile" value="\\%s\Users\zakaria\dev\evenetmanager\dll_monetique\Debit\DataDebitIn.txt" />
				<entry key="payment.debit.outFile" value="\\%s\Users\zakaria\dev\evenetmanager\dll_monetique\Debit\DataDebitout.txt" />
				<!-- <entry key="upload.event.folder.images" value="C:\Users\zakaria\dev\evenetmanager\uploads" /> -->
				<entry key="upload.event.folder.images" value="C:\Users\zakaria\git\rfi_repo\event-manager\src\main\webapp\uploads\event\images" />
				<entry key="event.trending.max" value="5" />
				
				
			</map>
		</constructor-arg>
	</bean>
	
	<bean id="messages" class="java.util.HashMap">
		<constructor-arg>
			<map>
				<entry key="MSG000001" value="Impossible de récuperer les informations sur la carte" />
				<entry key="MSG000002" value="Solde insuffisant pour effectuer l'opération" />
				<entry key="MSG000003" value="Paiement effectué avec succès" />
				<entry key="MSG000004" value="Erreur est survenue durant le paiement" />
				<entry key="MSG000005" value="Le client N° %s est déjà inscrit dans cette événemnt" />		
				<entry key="MSG000006" value="Invalid subcription id" />
				<entry key="MSG000007" value="User subscription not found" />
				<entry key="MSG000008" value="User subscription successfully updated" />
				<entry key="MSG000009" value="La salle est pleine Nombre (Max = %s)" />
				<entry key="MSG000010" value="Fichier invalid" />
				<entry key="MSG000011" value="Fichier importé avec succès" />
				<entry key="MSG000012" value="Impossible de créer le client" />
			</map>
		</constructor-arg>
	</bean>
	
	<bean id="paymentMethods" class="java.util.HashMap">
		<constructor-arg>
			<map>
				<entry key="MS_CARD" value="Carte multiservices" />
				<entry key="CASH" value="Espèce" />
				<entry key="CR_CARD" value="Carte bancaire" />
				<!-- <entry key="LIST" value="Echange d'un billet electrique" /> -->
			</map>
		</constructor-arg>
	</bean>
	
	<bean id="referenceService" class="ma.eventmanager.service.ReferenceService">
		<property name="envVariabls" ref="envVariabls" />
		<property name="messages" ref="messages" />
		<property name="paymentMethods" ref="paymentMethods" />		
	</bean>



	<!-- 	
	<wss:binding url="/eventmanagerservices">
		<wss:service>
            <ws:service bean="/eventmanagerWs"/>
        </wss:service>
    </wss:binding>

    Web service methods
    <bean id="eventmanagerWs" class="ma.eventmanager.webservices.api.EventManagerServices">
    	<property name="eventManagerBo" ref="eventManagerBo" />
    </bean>
    
    <bean id="eventManagerBo" class="ma.eventmanager.webservices.impl.EventManagerServicesImpl" />
 	-->
 
</beans>
